# -*- coding: utf-8 -*-
"""statistics.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uXKZ5l5C4vmbPakwnU_nqnY0nM8ux7ir
"""

# !git clone https://github.com/patrick-batman/Mosaic-24.git

# %cd /content/Mosaic-24/Mosaic PS2
# !python hangman.py --sample True
import pandas as pd
text = pd.read_table(r"D:\Mosaic PS2\training.txt",header=None , names=["words"])
text
import numpy as np
from collections import defaultdict
d=defaultdict(int)
for i in text["words"]:
  d[len(i)]+=1
d
# import matplotlib.pyplot as plt
# plt.bar([x for x in d.keys()],[y for y in d.values()])
# plt.show()
vowel=['a' ,'e','i' ,'o','u' ]
l=[]
for word in text["words"]:
  v=0;c=0
  for i in word:
    if i in vowel:
      v+=1
    else:
      c+=1
  l.append(v/(c+v))
# print(f"v% = {np.array(l).mean()*100:.2f}%")
l_prob=defaultdict(int)
t_len=0
for word in text["words"]:
  for i in word:
    l_prob[i]+=1
  t_len+=1
sorted_l_prob = sorted(l_prob.items(), key=lambda item: item[1],reverse=True)
sorted_l_prob
initial_l=[]
for alp,val in sorted_l_prob:
  if alp in vowel:
    initial_l.append(alp)

for alp,val in sorted_l_prob:
  if alp not in vowel:
    initial_l.append(alp)

initial_l
# import matplotlib.pyplot as plt
# X=[chr(x) for x in range(97,97+26)]
# # X
# plt.bar(X,[l_prob[x]/t_len for x in X]) # character occuring per word i.e. prob. of character occuring in a word
# plt.show()
v = np.zeros((26, 26))
for word in text["words"]:
  for i in range(len(word)-1):
    # s=word[i]+(word[i+1])
    # print((ord(word[i])))
    v[ord(word[i])-97,ord(word[i+1])-97]+=1
v.shape
import string
co_oc = pd.DataFrame(v, index=list(string.ascii_lowercase), columns=list(string.ascii_lowercase))
co_oc
alphabets = list(string.ascii_lowercase)
scores= np.array([[co_oc.loc[i][x] for x in alphabets] for i in alphabets])
ind=np.array(alphabets*26).reshape(26,26)
score_v= list(zip(ind,scores))
kk=[list(zip(score_v[all][0],score_v[all][1])) for all in range(26)]
sorted_pairs = [sorted(kk[i], key=lambda pair:pair[1],reverse=True) for i in range(26)]
sorted_pairs
# alphabets = list(string.ascii_lowercase)
scores= np.array([[co_oc.T.loc[i][x] for x in alphabets] for i in alphabets])
# ind=np.array(alphabets*26).reshape(26,26)
score_v= list(zip(ind,scores))
kk=[list(zip(score_v[all][0],score_v[all][1])) for all in range(26)]
sorted_pairs2 = [sorted(kk[i], key=lambda pair:pair[1],reverse=True) for i in range(26)]
sorted_pairs2


v = np.zeros((26, 26))
for word in text["words"]:
  for i in range(len(word)-2):
    # s=word[i]+(word[i+1])
    # print((ord(word[i])))
    v[ord(word[i])-97,ord(word[i+2])-97]+=1
v.shape
import string
co_oc = pd.DataFrame(v, index=list(string.ascii_lowercase), columns=list(string.ascii_lowercase))
co_oc
alphabets = list(string.ascii_lowercase)
scores= np.array([[co_oc.loc[i][x] for x in alphabets] for i in alphabets])
ind=np.array(alphabets*26).reshape(26,26)
score_v= list(zip(ind,scores))
kk=[list(zip(score_v[all][0],score_v[all][1])) for all in range(26)]
sorted_pairs3 = [sorted(kk[i], key=lambda pair:pair[1],reverse=True) for i in range(26)]
sorted_pairs3
# alphabets = list(string.ascii_lowercase)
scores= np.array([[co_oc.T.loc[i][x] for x in alphabets] for i in alphabets])
# ind=np.array(alphabets*26).reshape(26,26)
score_v= list(zip(ind,scores))
kk=[list(zip(score_v[all][0],score_v[all][1])) for all in range(26)]
sorted_pairs4 = [sorted(kk[i], key=lambda pair:pair[1],reverse=True) for i in range(26)]
sorted_pairs4



# min_value = np.min(co_oc)
# max_value = np.max(co_oc)
# n_cc = (co_oc + 0.1 - min_value) / (max_value - min_value)
# n_cc
co_oc.loc['a','a']
np.array(sorted_pairs)
# %cd /content/Mosaic-24/Mosaic PS2
# !python hangman.py --play True
# print(type(sorted_pairs[ord('c')-97][0]))
sorted_pairs[2]

